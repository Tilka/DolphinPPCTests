#include <cstdint>
#include <cstdio>
#include <string>

#include "tests.h"
#include "Utils.h"

static u32 GetXER()
{
    u32 xer;
    asm volatile ("mfxer %[out]" : [out]"=b"(xer));
    return xer;
}

static void SetXER(u32 value)
{
    asm volatile ("mtxer %[val]" : : [val]"b"(value) : "xer");
}

static u32 GetCR()
{
    u32 reg;
    asm volatile ("mfcr %[out]" : [out]"=b"(reg));
    return reg;
}

static void SetCR(u32 value)
{
    asm volatile ("mtcr %[val]" : : [val]"b"(value) : "cr0", "cr1", "cr2", "cr3", "cr4", "cr5", "cr6", "cr7");
}

// Test for a 2-component instruction
// e.g. ADDME rD, rA
#define OPTEST_2_COMPONENTS(inst, rA)                                        \
{                                                                            \
    u32 output;                                                              \
    u32 ra = rA;                                                             \
                                                                             \
    SetXER(0);                                                               \
    SetCR(0);                                                                \
    asm volatile (inst " %[out], %[Ra]": [out]"=&r"(output) : [Ra]"r"(ra));  \
                                                                             \
    printf("%-8s :: rD 0x%08X | rA 0x%08X | XER: 0x%08X | CR: 0x%08X\n",     \
           inst, output, rA, GetXER(), GetCR());                             \
}

// Test for a 3-component instruction
// e.g. ADD rD, rA, rB
#define OPTEST_3_COMPONENTS(inst, rA, rB)                                                       \
{                                                                                               \
    u32 output;                                                                                 \
    u32 ra = rA;                                                                                \
    u32 rb = rB;                                                                                \
                                                                                                \
    SetCR(0);                                                                                   \
    SetXER(0);                                                                                  \
    asm volatile (inst " %[out], %[Ra], %[Rb]": [out]"=&r"(output) : [Ra]"r"(ra), [Rb]"r"(rb)); \
                                                                                                \
    printf("%-8s :: rD 0x%08X | rA 0x%08X | rB 0x%08X | XER: 0x%08X | CR: 0x%08X\n",            \
           inst, output, rA, rB, GetXER(), GetCR());                                            \
}

// Used for testing the CMP instructions.
// Stores result to cr0.
#define OPTEST_3_COMPONENTS_CMP(inst, rA, rB)                             \
{                                                                         \
    u32 ra = rA;                                                          \
    u32 rb = rB;                                                          \
                                                                          \
    SetCR(0);                                                             \
    SetXER(0);                                                            \
    asm volatile (inst " cr0, %[Ra], %[Rb]": : [Ra]"r"(ra), [Rb]"r"(rb)); \
                                                                          \
    printf("%-8s :: rA 0x%08X | rB 0x%08X | XER: 0x%08X | CR: 0x%08X\n",  \
           inst, rA, rB, GetXER(), GetCR());                              \
}

void PPCIntegerTests()
{
    printf("ADD Variants\n");
    OPTEST_3_COMPONENTS("ADD", 0xFFFFFFFF, 1);
    OPTEST_3_COMPONENTS("ADD", -1, 1);
    OPTEST_3_COMPONENTS("ADD", -1, -1);
    OPTEST_3_COMPONENTS("ADD", 1, 0);
    OPTEST_3_COMPONENTS("ADD", 0, -1);
    OPTEST_3_COMPONENTS("ADD.", 0xFFFFFFFF, 1);
    OPTEST_3_COMPONENTS("ADD.", -1, 1);
    OPTEST_3_COMPONENTS("ADD.", -1, -1);
    OPTEST_3_COMPONENTS("ADD.", 1, 0);
    OPTEST_3_COMPONENTS("ADD.", 0, -1);
    OPTEST_3_COMPONENTS("ADDC", 0xFFFFFFFF, 1);
    OPTEST_3_COMPONENTS("ADDC", -1, 1);
    OPTEST_3_COMPONENTS("ADDC", -1, -1);
    OPTEST_3_COMPONENTS("ADDC", 1, 0);
    OPTEST_3_COMPONENTS("ADDC", 0, -1);
    OPTEST_3_COMPONENTS("ADDC.", 0xFFFFFFFF, 1);
    OPTEST_3_COMPONENTS("ADDC.", -1, 1);
    OPTEST_3_COMPONENTS("ADDC.", -1, -1);
    OPTEST_3_COMPONENTS("ADDC.", 1, 0);
    OPTEST_3_COMPONENTS("ADDC.", 0, -1);
    OPTEST_3_COMPONENTS("ADDCO", 0xFFFFFFFF, 1);
    OPTEST_3_COMPONENTS("ADDCO", -1, 1);
    OPTEST_3_COMPONENTS("ADDCO", -1, -1);
    OPTEST_3_COMPONENTS("ADDCO", 1, 0);
    OPTEST_3_COMPONENTS("ADDCO", 0, -1);
    OPTEST_3_COMPONENTS("ADDCO.", 0xFFFFFFFF, 1);
    OPTEST_3_COMPONENTS("ADDCO.", -1, 1);
    OPTEST_3_COMPONENTS("ADDCO.", -1, -1);
    OPTEST_3_COMPONENTS("ADDCO.", 1, 0);
    OPTEST_3_COMPONENTS("ADDCO.", 0, -1);
    OPTEST_3_COMPONENTS("ADDO", 0xFFFFFFFF, 1);
    OPTEST_3_COMPONENTS("ADDO", -1, 1);
    OPTEST_3_COMPONENTS("ADDO", -1, -1);
    OPTEST_3_COMPONENTS("ADDO", 1, 0);
    OPTEST_3_COMPONENTS("ADDO", 0, -1);
    OPTEST_3_COMPONENTS("ADDO.", 0xFFFFFFFF, 1);
    OPTEST_3_COMPONENTS("ADDO.", -1, 1);
    OPTEST_3_COMPONENTS("ADDO.", -1, -1);
    OPTEST_3_COMPONENTS("ADDO.", 1, 0);
    OPTEST_3_COMPONENTS("ADDO.", 0, -1);
    OPTEST_3_COMPONENTS("ADDE", 0xFFFFFFFF, 1);
    OPTEST_3_COMPONENTS("ADDE", -1, 1);
    OPTEST_3_COMPONENTS("ADDE", -1, -1);
    OPTEST_3_COMPONENTS("ADDE", 1, 0);
    OPTEST_3_COMPONENTS("ADDE", 0, -1);
    OPTEST_3_COMPONENTS("ADDE.", 0xFFFFFFFF, 1);
    OPTEST_3_COMPONENTS("ADDE.", -1, 1);
    OPTEST_3_COMPONENTS("ADDE.", -1, -1);
    OPTEST_3_COMPONENTS("ADDE.", 1, 0);
    OPTEST_3_COMPONENTS("ADDE.", 0, -1);
    OPTEST_3_COMPONENTS("ADDEO", 0xFFFFFFFF, 1);
    OPTEST_3_COMPONENTS("ADDEO", -1, 1);
    OPTEST_3_COMPONENTS("ADDEO", -1, -1);
    OPTEST_3_COMPONENTS("ADDEO", 1, 0);
    OPTEST_3_COMPONENTS("ADDEO", 0, -1);
    OPTEST_3_COMPONENTS("ADDEO.", 0xFFFFFFFF, 1);
    OPTEST_3_COMPONENTS("ADDEO.", -1, 1);
    OPTEST_3_COMPONENTS("ADDEO.", -1, -1);
    OPTEST_3_COMPONENTS("ADDEO.", 1, 0);
    OPTEST_3_COMPONENTS("ADDEO.", 0, -1);
    OPTEST_3_COMPONENTS("ADDI", 0xFFFFFFFF, 1);
    OPTEST_3_COMPONENTS("ADDI", -1, 1);
    OPTEST_3_COMPONENTS("ADDI", -1, -1);
    OPTEST_3_COMPONENTS("ADDI", 1, 0);
    OPTEST_3_COMPONENTS("ADDI", 0, -1);
    OPTEST_3_COMPONENTS("ADDIC", 0xFFFFFFFF, 1);
    OPTEST_3_COMPONENTS("ADDIC", -1, 1);
    OPTEST_3_COMPONENTS("ADDIC", -1, -1);
    OPTEST_3_COMPONENTS("ADDIC", 1, 0);
    OPTEST_3_COMPONENTS("ADDIC", 0, -1);
    OPTEST_3_COMPONENTS("ADDIS", 0xFFFFFFFF, 1);
    OPTEST_3_COMPONENTS("ADDIS", -1, 1);
    OPTEST_3_COMPONENTS("ADDIS", -1, -1);
    OPTEST_3_COMPONENTS("ADDIS", 1, 0);
    OPTEST_3_COMPONENTS("ADDIS", 0, -1);
    OPTEST_2_COMPONENTS("ADDME", 0xFFFFFFFF);
    OPTEST_2_COMPONENTS("ADDME", -1);
    OPTEST_2_COMPONENTS("ADDME", 1);
    OPTEST_2_COMPONENTS("ADDME", 0);
    OPTEST_2_COMPONENTS("ADDME.", 0xFFFFFFFF);
    OPTEST_2_COMPONENTS("ADDME.", -1);
    OPTEST_2_COMPONENTS("ADDME.", 1);
    OPTEST_2_COMPONENTS("ADDME.", 0);

// These manage to crash dolphin on the JIT.
// On the interpreter it fires panic alerts but does not crash.
// Guess overflow flags aren't implemented or something.
#if 0
    OPTEST_2_COMPONENTS("ADDMEO", 0xFFFFFFFF);
    OPTEST_2_COMPONENTS("ADDMEO", -1);
    OPTEST_2_COMPONENTS("ADDMEO", 1);
    OPTEST_2_COMPONENTS("ADDMEO", 0);
    OPTEST_2_COMPONENTS("ADDMEO.", 0xFFFFFFFF);
    OPTEST_2_COMPONENTS("ADDMEO.", -1);
    OPTEST_2_COMPONENTS("ADDMEO.", 1);
    OPTEST_2_COMPONENTS("ADDMEO.", 0);
#endif
    OPTEST_2_COMPONENTS("ADDZE", 0xFFFFFFFF);
    OPTEST_2_COMPONENTS("ADDZE", -1);
    OPTEST_2_COMPONENTS("ADDZE", 1);
    OPTEST_2_COMPONENTS("ADDZE", 0);
    OPTEST_2_COMPONENTS("ADDZE.", 0xFFFFFFFF);
    OPTEST_2_COMPONENTS("ADDZE.", -1);
    OPTEST_2_COMPONENTS("ADDZE.", 1);
    OPTEST_2_COMPONENTS("ADDZE.", 0);
    OPTEST_2_COMPONENTS("ADDZEO", 0xFFFFFFFF);
    OPTEST_2_COMPONENTS("ADDZEO", -1);
    OPTEST_2_COMPONENTS("ADDZEO", 1);
    OPTEST_2_COMPONENTS("ADDZEO", 0);
    OPTEST_2_COMPONENTS("ADDZEO.", 0xFFFFFFFF);
    OPTEST_2_COMPONENTS("ADDZEO.", -1);
    OPTEST_2_COMPONENTS("ADDZEO.", 1);
    OPTEST_2_COMPONENTS("ADDZEO.", 0);

    printf("\nAND Variants\n");
    OPTEST_3_COMPONENTS("AND", 0, 0);
    OPTEST_3_COMPONENTS("AND", 0, 1);
    OPTEST_3_COMPONENTS("AND", 1, 1);
    OPTEST_3_COMPONENTS("AND", 0xFFFFFFFF, 0);
    OPTEST_3_COMPONENTS("AND", 0xFFFFFFFF, 1);
    OPTEST_3_COMPONENTS("AND.", 0, 0);
    OPTEST_3_COMPONENTS("AND.", 0, 1);
    OPTEST_3_COMPONENTS("AND.", 1, 1);
    OPTEST_3_COMPONENTS("AND.", 0xFFFFFFFF, 0);
    OPTEST_3_COMPONENTS("AND.", 0xFFFFFFFF, 1);
    OPTEST_3_COMPONENTS("ANDC", 0, 0);
    OPTEST_3_COMPONENTS("ANDC", 0, 1);
    OPTEST_3_COMPONENTS("ANDC", 1, 1);
    OPTEST_3_COMPONENTS("ANDC", 0xFFFFFFFF, 0);
    OPTEST_3_COMPONENTS("ANDC", 0xFFFFFFFF, 1);
    OPTEST_3_COMPONENTS("ANDC.", 0, 0);
    OPTEST_3_COMPONENTS("ANDC.", 0, 1);
    OPTEST_3_COMPONENTS("ANDC.", 1, 1);
    OPTEST_3_COMPONENTS("ANDC.", 0xFFFFFFFF, 0);
    OPTEST_3_COMPONENTS("ANDC.", 0xFFFFFFFF, 1);
    OPTEST_3_COMPONENTS("ANDI.", 0, 0);
    OPTEST_3_COMPONENTS("ANDI.", 0, 1);
    OPTEST_3_COMPONENTS("ANDI.", 1, 1);
    OPTEST_3_COMPONENTS("ANDI.", 0xFFFFFFFF, 0);
    OPTEST_3_COMPONENTS("ANDI.", 0xFFFFFFFF, 1);
    OPTEST_3_COMPONENTS("ANDIS.", 0, 0);
    OPTEST_3_COMPONENTS("ANDIS.", 0, 1);
    OPTEST_3_COMPONENTS("ANDIS.", 1, 1);
    OPTEST_3_COMPONENTS("ANDIS.", 0xFFFFFFFF, 0);
    OPTEST_3_COMPONENTS("ANDIS.", 0xFFFFFFFF, 1);

    printf("\nCMP Variants\n");
    OPTEST_3_COMPONENTS_CMP("CMP", 0, 0);
    OPTEST_3_COMPONENTS_CMP("CMP", 0, 1);
    OPTEST_3_COMPONENTS_CMP("CMP", 1, 0);
    OPTEST_3_COMPONENTS_CMP("CMP", 0x7FFFFFFF, 0x7FFFFFFF);
    OPTEST_3_COMPONENTS_CMP("CMP", 0xFFFFFFFF, 0xFFFFFFFF);
    OPTEST_3_COMPONENTS_CMP("CMPI", 0, 0);
    OPTEST_3_COMPONENTS_CMP("CMPI", 0, 1);
    OPTEST_3_COMPONENTS_CMP("CMPI", 1, 0);
    OPTEST_3_COMPONENTS_CMP("CMPI", 0x7FFFFFFF, 0x7FFFFFFF);
    OPTEST_3_COMPONENTS_CMP("CMPI", 0xFFFFFFFF, 0xFFFFFFFF);
    OPTEST_3_COMPONENTS_CMP("CMPL", 0, 0);
    OPTEST_3_COMPONENTS_CMP("CMPL", 0, 1);
    OPTEST_3_COMPONENTS_CMP("CMPL", 1, 0);
    OPTEST_3_COMPONENTS_CMP("CMPL", 0x7FFFFFFF, 0x7FFFFFFF);
    OPTEST_3_COMPONENTS_CMP("CMPL", 0xFFFFFFFF, 0xFFFFFFFF);
    OPTEST_3_COMPONENTS_CMP("CMPLI", 0, 0);
    OPTEST_3_COMPONENTS_CMP("CMPLI", 0, 1);
    OPTEST_3_COMPONENTS_CMP("CMPLI", 1, 0);
    OPTEST_3_COMPONENTS_CMP("CMPLI", 0x7FFFFFFF, 0x7FFFFFFF);
    OPTEST_3_COMPONENTS_CMP("CMPLI", 0xFFFFFFFF, 0xFFFFFFFF);

    printf("\nCNTLZW Variants\n");
    for (int i = 0; i < 32; i++)
    {
        OPTEST_2_COMPONENTS("CNTLZW", (1 << i));
        OPTEST_2_COMPONENTS("CNTLZW.", (1 << i));
    }

    //
    // TODO: Add tests for condition register instructions
    //       such as cror, crand, etc.
    //

    printf("\nDIVW Variants\n");
    OPTEST_3_COMPONENTS("DIVW", 0, 1);
    OPTEST_3_COMPONENTS("DIVW", 1, 1);
    OPTEST_3_COMPONENTS("DIVW", 10, 2);
    OPTEST_3_COMPONENTS("DIVW", 0x000001A4, 0x00000045);
    OPTEST_3_COMPONENTS("DIVW", 0xFFFFFFFF, 0x7FFFFFFF);
    OPTEST_3_COMPONENTS("DIVW", 0xFFFFFFFF, 0x80000000);
    OPTEST_3_COMPONENTS("DIVW", 0xFFFFFFFF, 0xFFFFFFFF);
    OPTEST_3_COMPONENTS("DIVW.", 0, 1);
    OPTEST_3_COMPONENTS("DIVW.", 1, 1);
    OPTEST_3_COMPONENTS("DIVW.", 10, 2);
    OPTEST_3_COMPONENTS("DIVW.", 0x000001A4, 0x00000045);
    OPTEST_3_COMPONENTS("DIVW.", 0xFFFFFFFF, 0x7FFFFFFF);
    OPTEST_3_COMPONENTS("DIVW.", 0xFFFFFFFF, 0x80000000);
    OPTEST_3_COMPONENTS("DIVW.", 0xFFFFFFFF, 0xFFFFFFFF);
    OPTEST_3_COMPONENTS("DIVWO", 0, 1);
    OPTEST_3_COMPONENTS("DIVWO", 1, 1);
    OPTEST_3_COMPONENTS("DIVWO", 10, 2);
    OPTEST_3_COMPONENTS("DIVWO", 0x000001A4, 0x00000045);
    OPTEST_3_COMPONENTS("DIVWO", 0xFFFFFFFF, 0x7FFFFFFF);
    OPTEST_3_COMPONENTS("DIVWO", 0xFFFFFFFF, 0x80000000);
    OPTEST_3_COMPONENTS("DIVWO", 0xFFFFFFFF, 0xFFFFFFFF);
    OPTEST_3_COMPONENTS("DIVWO.", 0, 1);
    OPTEST_3_COMPONENTS("DIVWO.", 1, 1);
    OPTEST_3_COMPONENTS("DIVWO.", 10, 2);
    OPTEST_3_COMPONENTS("DIVWO.", 0x000001A4, 0x00000045);
    OPTEST_3_COMPONENTS("DIVWO.", 0xFFFFFFFF, 0x7FFFFFFF);
    OPTEST_3_COMPONENTS("DIVWO.", 0xFFFFFFFF, 0x80000000);
    OPTEST_3_COMPONENTS("DIVWO.", 0xFFFFFFFF, 0xFFFFFFFF);
    OPTEST_3_COMPONENTS("DIVWU", 0, 1);
    OPTEST_3_COMPONENTS("DIVWU", 1, 1);
    OPTEST_3_COMPONENTS("DIVWU", 10, 2);
    OPTEST_3_COMPONENTS("DIVWU", 0x000001A4, 0x00000045);
    OPTEST_3_COMPONENTS("DIVWU", 0xFFFFFFFF, 0x7FFFFFFF);
    OPTEST_3_COMPONENTS("DIVWU", 0xFFFFFFFF, 0x80000000);
    OPTEST_3_COMPONENTS("DIVWU", 0xFFFFFFFF, 0xFFFFFFFF);
    OPTEST_3_COMPONENTS("DIVWU.", 0, 1);
    OPTEST_3_COMPONENTS("DIVWU.", 1, 1);
    OPTEST_3_COMPONENTS("DIVWU.", 10, 2);
    OPTEST_3_COMPONENTS("DIVWU.", 0x000001A4, 0x00000045);
    OPTEST_3_COMPONENTS("DIVWU.", 0xFFFFFFFF, 0x7FFFFFFF);
    OPTEST_3_COMPONENTS("DIVWU.", 0xFFFFFFFF, 0x80000000);
    OPTEST_3_COMPONENTS("DIVWU.", 0xFFFFFFFF, 0xFFFFFFFF);
    OPTEST_3_COMPONENTS("DIVWUO", 0, 1);
    OPTEST_3_COMPONENTS("DIVWUO", 1, 1);
    OPTEST_3_COMPONENTS("DIVWUO", 10, 2);
    OPTEST_3_COMPONENTS("DIVWUO", 0x000001A4, 0x00000045);
    OPTEST_3_COMPONENTS("DIVWUO", 0xFFFFFFFF, 0x7FFFFFFF);
    OPTEST_3_COMPONENTS("DIVWUO", 0xFFFFFFFF, 0x80000000);
    OPTEST_3_COMPONENTS("DIVWUO", 0xFFFFFFFF, 0xFFFFFFFF);
    OPTEST_3_COMPONENTS("DIVWUO.", 0, 1);
    OPTEST_3_COMPONENTS("DIVWUO.", 1, 1);
    OPTEST_3_COMPONENTS("DIVWUO.", 10, 2);
    OPTEST_3_COMPONENTS("DIVWUO.", 0x000001A4, 0x00000045);
    OPTEST_3_COMPONENTS("DIVWUO.", 0xFFFFFFFF, 0x7FFFFFFF);
    OPTEST_3_COMPONENTS("DIVWUO.", 0xFFFFFFFF, 0x80000000);
    OPTEST_3_COMPONENTS("DIVWUO.", 0xFFFFFFFF, 0xFFFFFFFF);

    //
    // TODO: Tests for ECIWX, ECOWX, and (old McDonald had a farm) EIEIO
    //

    printf("\nEQV Variants\n");
    OPTEST_3_COMPONENTS("EQV", 0, 0);
    OPTEST_3_COMPONENTS("EQV", 1, 1);
    OPTEST_3_COMPONENTS("EQV", 0x7FFFFFFF, 0x7FFFFFFF);
    OPTEST_3_COMPONENTS("EQV", 0xFFFFFFFF, 0xFFFFFFFF);
    OPTEST_3_COMPONENTS("EQV.", 0, 0);
    OPTEST_3_COMPONENTS("EQV.", 1, 1);
    OPTEST_3_COMPONENTS("EQV.", 0x7FFFFFFF, 0x7FFFFFFF);
    OPTEST_3_COMPONENTS("EQV.", 0xFFFFFFFF, 0xFFFFFFFF);

    printf("\nEXTSB Variants\n");
    OPTEST_2_COMPONENTS("EXTSB", 0);
    OPTEST_2_COMPONENTS("EXTSB", 1);
    OPTEST_2_COMPONENTS("EXTSB", 0x7FFFFFFF);
    OPTEST_2_COMPONENTS("EXTSB", 0x80000000);
    OPTEST_2_COMPONENTS("EXTSB", 0xFFFFFFFF);
    OPTEST_2_COMPONENTS("EXTSB.", 0);
    OPTEST_2_COMPONENTS("EXTSB.", 1);
    OPTEST_2_COMPONENTS("EXTSB.", 0x7FFFFFFF);
    OPTEST_2_COMPONENTS("EXTSB.", 0x80000000);
    OPTEST_2_COMPONENTS("EXTSB.", 0xFFFFFFFF);
    OPTEST_2_COMPONENTS("EXTSH", 0);
    OPTEST_2_COMPONENTS("EXTSH", 1);
    OPTEST_2_COMPONENTS("EXTSH", 0x7FFFFFFF);
    OPTEST_2_COMPONENTS("EXTSH", 0x80000000);
    OPTEST_2_COMPONENTS("EXTSH", 0xFFFFFFFF);
    OPTEST_2_COMPONENTS("EXTSH.", 0);
    OPTEST_2_COMPONENTS("EXTSH.", 1);
    OPTEST_2_COMPONENTS("EXTSH.", 0x7FFFFFFF);
    OPTEST_2_COMPONENTS("EXTSH.", 0x80000000);
    OPTEST_2_COMPONENTS("EXTSH.", 0xFFFFFFFF);

    //
    // TODO: Tests for load instructions.
    //

    //
    // TODO: Tests for "Move to [x]" instructions.
    //

    printf("\nMULHW Variants\n");
    OPTEST_3_COMPONENTS("MULHW", 0, 0);
    OPTEST_3_COMPONENTS("MULHW", 50, 50);
    OPTEST_3_COMPONENTS("MULHW", 0x7FFF, 0x7FFF);
    OPTEST_3_COMPONENTS("MULHW", 0xFFFF, 0xFFFF);
    OPTEST_3_COMPONENTS("MULHW", 0x7FFFFFFF, 0x7FFFFFFF);
    OPTEST_3_COMPONENTS("MULHW", 0x80000000, 0x80000000);
    OPTEST_3_COMPONENTS("MULHW", 0xFFFFFFFF, 0xFFFFFFFF);
    OPTEST_3_COMPONENTS("MULHW.", 0, 0);
    OPTEST_3_COMPONENTS("MULHW.", 50, 50);
    OPTEST_3_COMPONENTS("MULHW.", 0x7FFF, 0x7FFF);
    OPTEST_3_COMPONENTS("MULHW.", 0xFFFF, 0xFFFF);
    OPTEST_3_COMPONENTS("MULHW.", 0x7FFFFFFF, 0x7FFFFFFF);
    OPTEST_3_COMPONENTS("MULHW.", 0x80000000, 0x80000000);
    OPTEST_3_COMPONENTS("MULHW.", 0xFFFFFFFF, 0xFFFFFFFF);
    OPTEST_3_COMPONENTS("MULHWU", 0, 0);
    OPTEST_3_COMPONENTS("MULHWU", 50, 50);
    OPTEST_3_COMPONENTS("MULHWU", 0x7FFF, 0x7FFF);
    OPTEST_3_COMPONENTS("MULHWU", 0xFFFF, 0xFFFF);
    OPTEST_3_COMPONENTS("MULHWU", 0x7FFFFFFF, 0x7FFFFFFF);
    OPTEST_3_COMPONENTS("MULHWU", 0x80000000, 0x80000000);
    OPTEST_3_COMPONENTS("MULHWU", 0xFFFFFFFF, 0xFFFFFFFF);
    OPTEST_3_COMPONENTS("MULHWU.", 0, 0);
    OPTEST_3_COMPONENTS("MULHWU.", 50, 50);
    OPTEST_3_COMPONENTS("MULHWU.", 0x7FFF, 0x7FFF);
    OPTEST_3_COMPONENTS("MULHWU.", 0xFFFF, 0xFFFF);
    OPTEST_3_COMPONENTS("MULHWU.", 0x7FFFFFFF, 0x7FFFFFFF);
    OPTEST_3_COMPONENTS("MULHWU.", 0x80000000, 0x80000000);
    OPTEST_3_COMPONENTS("MULHWU.", 0xFFFFFFFF, 0xFFFFFFFF);

    printf("\nMULLI\n");
    OPTEST_3_COMPONENTS("MULLI", 0, 0);
    OPTEST_3_COMPONENTS("MULLI", 50, 50);
    OPTEST_3_COMPONENTS("MULLI", 0x7FFF, 0x7FFF);
    OPTEST_3_COMPONENTS("MULLI", 0xFFFF, 0xFFFF);
    OPTEST_3_COMPONENTS("MULLI", 0x7FFFFFFF, 0x7FFFFFFF);
    OPTEST_3_COMPONENTS("MULLI", 0x80000000, 0x80000000);
    OPTEST_3_COMPONENTS("MULLI", 0xFFFFFFFF, 0xFFFFFFFF);

    printf("\nMULLW Variants\n");
    OPTEST_3_COMPONENTS("MULLW", 0, 0);
    OPTEST_3_COMPONENTS("MULLW", 50, 50);
    OPTEST_3_COMPONENTS("MULLW", 0x7FFF, 0x7FFF);
    OPTEST_3_COMPONENTS("MULLW", 0xFFFF, 0xFFFF);
    OPTEST_3_COMPONENTS("MULLW", 0x7FFFFFFF, 0x7FFFFFFF);
    OPTEST_3_COMPONENTS("MULLW", 0x80000000, 0x80000000);
    OPTEST_3_COMPONENTS("MULLW", 0xFFFFFFFF, 0xFFFFFFFF);
    OPTEST_3_COMPONENTS("MULLW.", 0, 0);
    OPTEST_3_COMPONENTS("MULLW.", 50, 50);
    OPTEST_3_COMPONENTS("MULLW.", 0x7FFF, 0x7FFF);
    OPTEST_3_COMPONENTS("MULLW.", 0xFFFF, 0xFFFF);
    OPTEST_3_COMPONENTS("MULLW.", 0x7FFFFFFF, 0x7FFFFFFF);
    OPTEST_3_COMPONENTS("MULLW.", 0x80000000, 0x80000000);
    OPTEST_3_COMPONENTS("MULLW.", 0xFFFFFFFF, 0xFFFFFFFF);
    OPTEST_3_COMPONENTS("MULLWO", 0, 0);
    OPTEST_3_COMPONENTS("MULLWO", 50, 50);
    OPTEST_3_COMPONENTS("MULLWO", 0x7FFF, 0x7FFF);
    OPTEST_3_COMPONENTS("MULLWO", 0xFFFF, 0xFFFF);
    OPTEST_3_COMPONENTS("MULLWO", 0x7FFFFFFF, 0x7FFFFFFF);
    OPTEST_3_COMPONENTS("MULLWO", 0x80000000, 0x80000000);
    OPTEST_3_COMPONENTS("MULLWO", 0xFFFFFFFF, 0xFFFFFFFF);
    OPTEST_3_COMPONENTS("MULLWO.", 0, 0);
    OPTEST_3_COMPONENTS("MULLWO.", 50, 50);
    OPTEST_3_COMPONENTS("MULLWO.", 0x7FFF, 0x7FFF);
    OPTEST_3_COMPONENTS("MULLWO.", 0xFFFF, 0xFFFF);
    OPTEST_3_COMPONENTS("MULLWO.", 0x7FFFFFFF, 0x7FFFFFFF);
    OPTEST_3_COMPONENTS("MULLWO.", 0x80000000, 0x80000000);
    OPTEST_3_COMPONENTS("MULLWO.", 0xFFFFFFFF, 0xFFFFFFFF);

    printf("\nNAND Variants\n");
    OPTEST_3_COMPONENTS("NAND", 0, 0);
    OPTEST_3_COMPONENTS("NAND", 0, 1);
    OPTEST_3_COMPONENTS("NAND", 1, 0);
    OPTEST_3_COMPONENTS("NAND", 1, 1);
    OPTEST_3_COMPONENTS("NAND", 0x7FFF, 0x7FFF);
    OPTEST_3_COMPONENTS("NAND", 0x8000, 0x8000);
    OPTEST_3_COMPONENTS("NAND", 0xFFFF, 0xFFFF);
    OPTEST_3_COMPONENTS("NAND", 0x7FFFFFFF, 0x7FFFFFFF);
    OPTEST_3_COMPONENTS("NAND", 0x80000000, 0x80000000);
    OPTEST_3_COMPONENTS("NAND", 0xFFFFFFFF, 0xFFFFFFFF);
    OPTEST_3_COMPONENTS("NAND.", 0, 0);
    OPTEST_3_COMPONENTS("NAND.", 0, 1);
    OPTEST_3_COMPONENTS("NAND.", 1, 0);
    OPTEST_3_COMPONENTS("NAND.", 1, 1);
    OPTEST_3_COMPONENTS("NAND.", 0x7FFF, 0x7FFF);
    OPTEST_3_COMPONENTS("NAND.", 0x8000, 0x8000);
    OPTEST_3_COMPONENTS("NAND.", 0xFFFF, 0xFFFF);
    OPTEST_3_COMPONENTS("NAND.", 0x7FFFFFFF, 0x7FFFFFFF);
    OPTEST_3_COMPONENTS("NAND.", 0x80000000, 0x80000000);
    OPTEST_3_COMPONENTS("NAND.", 0xFFFFFFFF, 0xFFFFFFFF);

    printf("\nNEG Variants\n");
    OPTEST_2_COMPONENTS("NEG", 0);
    OPTEST_2_COMPONENTS("NEG", 1);
    OPTEST_2_COMPONENTS("NEG", 0x7FFFFFFF);
    OPTEST_2_COMPONENTS("NEG", 0x80000000);
    OPTEST_2_COMPONENTS("NEG", 0xFFFFFFFF);
    OPTEST_2_COMPONENTS("NEG.", 0);
    OPTEST_2_COMPONENTS("NEG.", 1);
    OPTEST_2_COMPONENTS("NEG.", 0x7FFFFFFF);
    OPTEST_2_COMPONENTS("NEG.", 0x80000000);
    OPTEST_2_COMPONENTS("NEG.", 0xFFFFFFFF);
    OPTEST_2_COMPONENTS("NEGO", 0);
    OPTEST_2_COMPONENTS("NEGO", 1);
    OPTEST_2_COMPONENTS("NEGO", 0x7FFFFFFF);
    OPTEST_2_COMPONENTS("NEGO", 0x80000000);
    OPTEST_2_COMPONENTS("NEGO", 0xFFFFFFFF);
    OPTEST_2_COMPONENTS("NEGO.", 0);
    OPTEST_2_COMPONENTS("NEGO.", 1);
    OPTEST_2_COMPONENTS("NEGO.", 0x7FFFFFFF);
    OPTEST_2_COMPONENTS("NEGO.", 0x80000000);
    OPTEST_2_COMPONENTS("NEGO.", 0xFFFFFFFF);

    printf("\nNOR Variants\n");
    OPTEST_3_COMPONENTS("NOR", 0, 0);
    OPTEST_3_COMPONENTS("NOR", 0, 1);
    OPTEST_3_COMPONENTS("NOR", 1, 0);
    OPTEST_3_COMPONENTS("NOR", 1, 1);
    OPTEST_3_COMPONENTS("NOR", 0x7FFFFFFF, 0x7FFFFFFF);
    OPTEST_3_COMPONENTS("NOR", 0x80000000, 0x80000000);
    OPTEST_3_COMPONENTS("NOR", 0xFFFFFFFF, 0xFFFFFFFF);
    OPTEST_3_COMPONENTS("NOR.", 0, 0);
    OPTEST_3_COMPONENTS("NOR.", 0, 1);
    OPTEST_3_COMPONENTS("NOR.", 1, 0);
    OPTEST_3_COMPONENTS("NOR.", 1, 1);
    OPTEST_3_COMPONENTS("NOR.", 0x7FFFFFFF, 0x7FFFFFFF);
    OPTEST_3_COMPONENTS("NOR.", 0x80000000, 0x80000000);
    OPTEST_3_COMPONENTS("NOR.", 0xFFFFFFFF, 0xFFFFFFFF);

    printf("\nOR Variants\n");
    OPTEST_3_COMPONENTS("OR", 0, 0);
    OPTEST_3_COMPONENTS("OR", 0, 1);
    OPTEST_3_COMPONENTS("OR", 1, 0);
    OPTEST_3_COMPONENTS("OR", 1, 1);
    OPTEST_3_COMPONENTS("OR", 0x7FFFFFFF, 0x7FFFFFFF);
    OPTEST_3_COMPONENTS("OR", 0x80000000, 0x80000000);
    OPTEST_3_COMPONENTS("OR", 0xFFFFFFFF, 0xFFFFFFFF);
    OPTEST_3_COMPONENTS("OR.", 0, 0);
    OPTEST_3_COMPONENTS("OR.", 0, 1);
    OPTEST_3_COMPONENTS("OR.", 1, 0);
    OPTEST_3_COMPONENTS("OR.", 1, 1);
    OPTEST_3_COMPONENTS("OR.", 0x7FFFFFFF, 0x7FFFFFFF);
    OPTEST_3_COMPONENTS("OR.", 0x80000000, 0x80000000);
    OPTEST_3_COMPONENTS("OR.", 0xFFFFFFFF, 0xFFFFFFFF);
    OPTEST_3_COMPONENTS("ORC", 0, 0);
    OPTEST_3_COMPONENTS("ORC", 0, 1);
    OPTEST_3_COMPONENTS("ORC", 1, 0);
    OPTEST_3_COMPONENTS("ORC", 1, 1);
    OPTEST_3_COMPONENTS("ORC", 0x7FFFFFFF, 0x7FFFFFFF);
    OPTEST_3_COMPONENTS("ORC", 0x80000000, 0x80000000);
    OPTEST_3_COMPONENTS("ORC", 0xFFFFFFFF, 0xFFFFFFFF);
    OPTEST_3_COMPONENTS("ORC.", 0, 0);
    OPTEST_3_COMPONENTS("ORC.", 0, 1);
    OPTEST_3_COMPONENTS("ORC.", 1, 0);
    OPTEST_3_COMPONENTS("ORC.", 1, 1);
    OPTEST_3_COMPONENTS("ORC.", 0x7FFFFFFF, 0x7FFFFFFF);
    OPTEST_3_COMPONENTS("ORC.", 0x80000000, 0x80000000);
    OPTEST_3_COMPONENTS("ORC.", 0xFFFFFFFF, 0xFFFFFFFF);
    OPTEST_3_COMPONENTS("ORI", 0, 0);
    OPTEST_3_COMPONENTS("ORI", 0, 1);
    OPTEST_3_COMPONENTS("ORI", 1, 0);
    OPTEST_3_COMPONENTS("ORI", 1, 1);
    OPTEST_3_COMPONENTS("ORI", 0x7FFFFFFF, 0x7FFFFFFF);
    OPTEST_3_COMPONENTS("ORI", 0x80000000, 0x80000000);
    OPTEST_3_COMPONENTS("ORI", 0xFFFFFFFF, 0xFFFFFFFF);
    OPTEST_3_COMPONENTS("ORIS", 0, 0);
    OPTEST_3_COMPONENTS("ORIS", 0, 1);
    OPTEST_3_COMPONENTS("ORIS", 1, 0);
    OPTEST_3_COMPONENTS("ORIS", 1, 1);
    OPTEST_3_COMPONENTS("ORIS", 0x7FFFFFFF, 0x7FFFFFFF);
    OPTEST_3_COMPONENTS("ORIS", 0x80000000, 0x80000000);
    OPTEST_3_COMPONENTS("ORIS", 0xFFFFFFFF, 0xFFFFFFFF);

}
